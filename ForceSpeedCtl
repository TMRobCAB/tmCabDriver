/***
 *    _________     _____ __________  ___________    .__            _____                  _______      _______  ____
 *    \_   ___ \   /  _  \\______   \ \__    ___/___ |  |   ____   /     \ _____    ____   \   _  \     \   _  \/_   |
 *    /    \  \/  /  /_\  \|    |  _/   |    |_/ __ \|  | _/ __ \ /  \ /  \\__  \  /    \  /  /_\  \    /  /_\  \|   |
 *    \     \____/    |    \    |   \   |    |\  ___/|  |_\  ___//    Y    \/ __ \|   |  \ \  \_/   \   \  \_/   \   |
 *     \______  /\____|__  /______  /   |____| \___  >____/\___  >____|__  (____  /___|  /  \_____  / /\ \_____  /___|
 *            \/         \/       \/               \/          \/        \/     \/     \/         \/  \/       \/
 */

#include <stdint.h>
#include <stdbool.h>
#include <driverlib/rom.h>
#include "Sensors/QEIModule.h"
#include  "Actuators/PWMModule.h"
#include "utils/ControlScheme.h"
#include "utils/RGBDriver.h"
#include "Controllers/SpeedController.h"
#include "Controllers/ForceController.h"
#include "utils/MainMenu.h"
#include "drivers/buttons.h"
#include "ConfigTiva.h"
#include "Communication/UARTModule.h"
#include "Storage/USBStickModule.h"

//#define TARGET_IS_BLIZZARD_RB1

uint32_t refIter = 0;

int main(void) {

	//
	// Enable lazy stacking for interrupt handlers.  This allows floating-point
	// instructions to be used within interrupt handlers, but at the expense of
	// extra stack usage.
	//
	ROM_FPULazyStackingEnable();
	ROM_FPUEnable();

	// Initialize system Clock
	TivaCfg_SysClk();

	uint32_t speedCtlFS = 1000;

	// Config RGB
	RGB_Config();

	// Initialize buttons
	ButtonsInit();

	// Config QEI
	QEI_Config();



	ClassPWM pwmModule;
	PWM_Construct(&pwmModule, 0, 25000, 12, speedCtlFS);

	ClassCtlScheme ctlScheme;
	CtlScheme_Construct(&ctlScheme, &pwmModule, speedCtlFS);

	// Force Transducer config
	ForceT_Config(speedCtlFS / 10);

	ClassUSBStick stickStorage;
	USBStick_Construct(&stickStorage, speedCtlFS, LOGGER);
	USBStick_Enable(&stickStorage);
	while (_deviceState != eSTATE_DEVICE_READY) {
		USBStick_Run(&stickStorage);
	}
	//USBStick_Disable(&stickStorage);

//	ClassUART uartModule;
//	UART_Construct(&uartModule, 1, 115200, SysCtlClockGet(), 500);

	CtlScheme_AddComModule(&ctlScheme, &stickStorage._USBStickHandler);
	//CtlScheme_AddComModule(&ctlScheme, &uartModule._uartHandeler);

//	float speedKP = 3;
//	float speedKI = 6;
//	float speedSat = 12;
//	float speedISat = 5;

	float speedKP = 6;
	float speedKI = 6;
	float speedSat = 12;
	float speedISat = 12;

	ClassSpeedCtl speedCtl;
	SpeedCtl_Construct(&speedCtl, speedCtlFS, speedKP, speedKI, 0, speedSat,
			speedISat);

	float forceKP = 5;
	float forceSat = 3;

	ClassForceCtl forceCtl;
	ForceCtl_Construct(&forceCtl, speedCtlFS / 10, forceKP, 0, 0, forceSat, 0);

	CtlScheme_Connect(&ctlScheme, &speedCtl._speedHandler,
			&pwmModule._pwmHandler);
	CtlScheme_Connect(&ctlScheme, &forceCtl._forceHandler, &speedCtl._speedHandler);

	float forceRef = 0;

	forceCtl._forceIOPorts._inPortsAdder[0] = &forceRef;
	forceCtl._forceIOPorts._inAdderPortsNum++;

	USBStick_AddVar2Stream(&stickStorage, &speedCtl._speedPID._ctlVar, "Speed");
	USBStick_AddVar2Stream(&stickStorage, &speedCtl._speedPID._ctlSignalI, "Isp");
	USBStick_AddVar2Stream(&stickStorage, &speedCtl._speedPID._ctlSignal, "DCV");
	USBStick_AddVar2Stream(&stickStorage, &forceCtl._forcePID._ctlSignalP, "PForce");
	USBStick_AddVar2Stream(&stickStorage, &forceCtl._forcePID._ctlVar, "Force");

	while (1) {

		if (CtlScheme_IsRunning(&ctlScheme) == false) {

			USBStick_Run(&stickStorage);
		}

		runMenu(&ctlScheme);


		if (refIter >= 300000 * 1) {

			refIter = 0;

			forceRef *= -1;
		} else {

			refIter++;
		}
	}
}
